Wyatt Eng
Deduper PseudoCode

################################################################################
Define Problem: During the library preparation, PCR is required to increase the
amount of genetic material that can be then be loaded on to a sequencer.
However, PCR duplication may occur and lead to unequal coverage across a genome.
In order to account for PCR duplication, we have to identify reads that map to
the same chromosome and position of a genome in order to check for duplicated
contigs.
################################################################################

General Workflow:
    -Sort Sam file based on chromosome and starting position
    -Check if UMI is valid
    -Check if UMI's are identical
    -Check the chromosome
    -Check if strand is 3' or 5' using bitwise flag
    -Calculate the 5' starting position
    -Check if the starting position matches the previous record

__________
Functions:

1) Take in a record and parses the string to extract the UMI, Chromosome, Cigar String, and Left-most Position.
   -Extract Chromosome number
   -Extract out UNI and check to see if the UMI is valid.
   -Check bitwise flag to see if strand is mapped in a forward or reverse direction.
   -Calculate the 5' position based off of the directionality accounting for soft-clipping and Indels for reverse complement strands
   def get_tuple(Record_string)
   ````Take in a record's header and create a tuple containing the UMI, Chromosome and 5' Position```
   Return: tuple("Chromosome","UMI", "5' Position"), Direction

   Example Input: "NS500451:154:HWKTMBGXX:1:11101:15364:1139:GAACAGGT 2       5       119767599       36      66M     =       119767642       109     CCCCAAACAAGTGGTCCCCAAAAGAGACAGCCTCAAAATGGTCTAAGAAGCTGGCATAAAGGTCAG      6AEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEEEEAEEEEEEEEEEEE      MD:Z:66 NH:i:1  HI:i:1  NM:i:0  SM:i:36 XQ:i:40 X2:i:0  XO:Z:CU XG:Z:A"
   Example Output: ("5", "GAACAGGT", "119767599"), "Forward"


Everything in-between % are function ideas that were combined into the function above:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
1) Check to see if UMI's are valid and are the same.

def get_UMI's(Read_1[1]):
  '''Takes in the portion of the sam record containing the UMI. Parsing must
  be done to isolate the UMI sequence. The Function will return the UMI sequence'''
  -split input by ":"
  Return: string (*UMI Sequence*)

Example Input: NS500451:154:HWKTMBGXX:1:12434:14236:1129:GAACAGGT
Example Output: GAACAGGT


2) Bitwise flag check if a strand is aligned forward or reverse.

def get_bitwise_direction(Read_1[*bitwise_flag_index*]):
  '''Check to see if bitwise flag indicates the reads aligned in the same direction
     Forward == True and Reverse == False'''
  Return: bool (True or False)

Example Input: 83
Example Output: False

3) Calculate the 5' Starting position.

def get_start_position(Read_1[*CIGAR_String_Index*], Read_1[*CIGAR_String_Index*]TRUE or FALSE)
  '''Calculate the 5' starting position, accounting for record directionality.
  Insertions and deletions adjusted for only reverse complemented strands'''
  Return: integer (5' Starting Position)

Example Input: 66M, 62M4S, 64949467, 64949463
Example Output: True
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

___________
Pseudocode:

Using a bash script, sort the sam file by chromosome and left most starting position.

Import Libraries
  -import itertools

Open Index File and use a for loop to iterate through STL96.txt and store every UMI into a dictionary
  -Store UMIs in UMI_dict[UMI:0]

  Open Input/Output Files:
    -Input Sam file to read from
    -Output Sam file to read from

Define a dictionary to store the unique properties of each record of a chromosome.
The dictionary will store unique reads and cross checked against a new record that have been read in.
-Forward_Dict = dict()
-Reverse_Dict = dict()
-Keys will be a data structure storing UMI, Chromosome, 5' Position
-Values will be an arbitrary variable.

-Set previous chromosome to 0

for current_line in file: #Read in one line at a time from a file#

  -Extract chromosome value from current_line and store as a variable.

  -> if extracted chromosome value is different than the previous chromosome value:
    -Flush the Forward_Dict and Reverse_Dict.

  -Pass the current_line variable into the get_tuple() function and save function output as a tuple variable.
  -Set a direction variable to later be used to identify which dictionary to compare the tuple with.

  -> if direction is forward, check to see if the tuple is in the forward dictionary

    -> if tuple is not in forward dictionary, append current_line to outfile

  -> else if direction is reverse, check to see if the tuple is in the reverse dictionary

    -> if tuple is not in reverse dictionary, append current_line to outfile.

  -Set previous chromosome variable to current chromosome variable

Close All Files:
  -Input Sam file to read from
  -Output Sam file to read from
