"""
DeDuper- Part 1 - Pseudocode – Reference Based PCR Duplicate Removal Tool
David Evarts 
Due 11/15/19

The Problem:  PCR amplification is used to provide enough fragments to capture most of the unique reads and create a library for sequencing.   RNAseq is often used to measure differential expression.  PCR duplicates can be mistaken for biological increases in expression and mask the true expression levels.  If the amount of PCR amplification is heightened, in order to capture elements that are rarely expressed, the amount of PCR duplication can increase substantially.

The Purpose: If duplicates that are not due to higher expression, but are, instead, artifacts of library creation, such as PCR amplification, can be removed, a better understanding of the expression levels of genetic elements can be achieved.

The general strategy:  When Unique Molecular Identifiers (UMIs) have been added, a PCR duplicate fragment read will have all of the following features, when compared with a duplicated read.  These can be determined from the SAM file and a list of UMIs.  Parsing through the reads, duplicates will be isolated.

•	It will be on the same strand.
•	It will be on the same chromosome
•	It will be at the same initial position, after accounting for soft clipping at the beginning in the read direction.
•	It will have the same UMI.
Examples:
Properly formatted Input Sam file:  What does this look like?
Properly formated expected output sam file:

######Functions:#########

Def Direction_Checker(one Sam aligned read):
## A function to check the strand on which a read is directed.
##Check read##

Def UMI_Checker(one Sam aligned read):
## A function to find the UMI of a read
##  ##

Def Chrom_Checker(one Sam aligned read cigar string):
## A function to find the chromosome on which a read resides

Def Plus_adjust_start (one Sam aligned plus read):
##A function that takes the cigar string from one forward read and its start position and returns an adjusted start position.##
•	Grab start position number from SAM column 4, set it as count
•	Grab cigar string by column number
•	Grep for first number letter combination
	- If letter is S, subtract the number preceding it from count.
Return - A number that is the adjusted start position.
Unit Test - Try the following cigar strings and start position.  Print the count. 
	start = 1, cigar = 10M, adusted = 1
	start = 2, cigar = 2S5M, adjusted = 0
	start = 37, cigar = 1S3M7N4M, adjusted = 36

Def Minus_adjust_start (one Sam aligned minus read):
## A function to take the cigar string from one reverse read and its start position and find an adjusted start position.
•	Grab start position number, set it as count
•	Grab cigar string by column number
•	In a loop Grep for each number- letter combination
	- If letter is S preceeded by a letter and a number, add the number preceding it to count. 
          This is because you want to add soft-clips at the end of the number chain/ start of the read  on reverse reads, but 
	  not at the left-most position.
	- If letter is M, add the number preceding it to the count.
	- If letter is N add the number preceding it to the count.
	- If letter is D add the number preceding it to the count.
	- If letter is I ignore the number in front of it.
Return - A number that is the adjusted start position.
Unit Test - Try the following cigar strings and start position.  Print the count. 
	start = 50, cigar = 10M,20N,10M,5D,5S adusted = 100
	start = 0, cigar = 5M,10N,5M, adjusted = 20
	start = 0, cigar = 1S5M10N4M, adjusted = 20
	
########  Pseudo-Code:  ###########
-Input is via a bash slurm script which collects the arg-parse arguments.

1.) #### Install arg-parse function ####
Return – ability to set arg-parse
Unit Test – See Arg parse function below. If Arg-Parse function works, it’s installed.

2.) #### Install conda environment  ####
Return – ability to read python script
Unit Test – Slurm shell should be able to read and respond to a python print(“foo”) script and will display bgmp -env3

3.) ###Use Arg-Parse function to collect information and set tags that can be called.###  
 - Collect Input SAM file. Specify that it must be a SAM file that has been ordered using SamTools -sort. 
 - SamTools sort outputs a sorted (by position) Bam file. 
 - If we use Bam to Sam to convert it to a human readable file, do we keep the sorting?
	-collect UMI file as a TSV
	-collect from user wether this is a single or paired-end read
	-collect from user whether duplicates should be recorded in a duplicates output file
	-collect from user name to use on output file
Return – A slurm script calling a correctly worded python script with arg flags in slurm script and arg parse coded in python script should correctly respond to the following print commands.
	-print name of sam file input test script.  tester_ordered.sam
	-print name of UMI.tsv
	-print single or paired end
	-print duplicates file name.sam or none
	-print correct file name.sam

4.) #### Open the input SAM file####
Open as read given in ArgParse.
Return- opened file
Unit Test – display tester input sam file with cat command piped to head.

5.) ####Open an output duplicates_removed.sam File.####
Open with write permission
Return -opened, writable file.
Unit Test – write first full read from input tester file to output file.  Display contents with cat command.

######Big Loop#######
6.) ####Set variables for loop####It .
	a. -For each line in the input file, if the line begins with "@", copy it  to output file and move on.
	b.- copy the first read that does not have an @ into the output file
Return - An output file labelled
	
7.) ####start read checker loop####
#This section runs through the reads and checks to see if they match the last read copied into the outfile.  If they match, they are duplicates and are not added to the output file.  If they do not match they are added to the outfile and the next read after the new addition is checked, restarting the loop, until all are done.
  
  For read copied into out file, do the following.  #This means that duplicates are skipped and the loop restarts at the next new (non-duplicated) read.
	For the next read in the input file do the following
		1. Check Chromosome with Chrom_Checker function.
		2. Make a variable. Chrom = the chromosome number resulting from 1.
		3. Check UMI with Umi_Checker function
		4. Check UMI against UMI_List for quality assurance.  If it doesn't match anything in list place in <Output_File_Name>_mismatched_UMI.SAM.
		5. Make a variable UMI = The UMI found in step 3.
		6. Check Direction with Direction_Checker. 
		7. Make a variable for forward or reverse. Strand = + or Strand =-
			a.) If it's use Plus_adjust_start function to find adjusted start.  
			b.) If it's not forward use the Minus_adjust_start function.
		8. Make a varaiable. Start = the start position found with one of the two adjust_start functions.
		9. For the next read in the SAM file, do the following.  If at any point it does not match go to 10.
			a.) Use the Chrom_checker to check the chromosome the read is on.  If it matches the Chrom variable continue.  If not go to step 10.
			b.) Use the UMI_checker to find the UMI associated with the read.  If it matches UMI variable continue.  If not go to 10.
			c.) Use Direction_Checker to check direction. If it matches Strand variable continue.  If not go to 10
			d.) If Strand matches and strand is + use Plus_start to determine adjusted start position.  If matches start continue loop at #9 with next read.
		10. When a read is found that does not match copy the read into the out file

"""
